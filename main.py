import streamlit as st
from PIL import Image
import google.generativeai as genai
import io
import base64
import dotenv
import os
import PyPDF2  # For pdf processing
from docx import Document  # For word document processing


dotenv.load_dotenv()
# configure gemini api key
try:
    genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
except KeyError:
    st.error(
        "Gemini API Key not found. Make sure you have configured it in your environment variables as GEMINI_API_KEY."
    )
    st.stop()


# Model config
model = genai.GenerativeModel("gemini-2.0-flash-thinking-exp-01-21")



# fns

def extract_text_from_pdf(file):
    """Extracts text from a PDF file."""
    pdf_reader = PyPDF2.PdfReader(file)
    text = ""
    for page in pdf_reader.pages:
        text += page.extract_text()
    return text

def extract_text_from_docx(file):
    """Extracts text from a DOCX file."""
    doc = Document(file)
    text = ""
    for paragraph in doc.paragraphs:
        text += paragraph.text + "\n"
    return text


def extract_text_from_txt(file):
    """Extracts text from a TXT file"""
    text = file.read().decode("utf-8") # utf8 enc
    return text



def solve_problem(input_type, problem_input):
    """
    Solves math and logic problems or interprets text using Gemini.

    Args:
        input_type: "image", "text_normal", "text_latex", "pdf", "docx", or "txt"
        problem_input: The image (as a PIL object), text (string), PDF (file-like object), DOCX (file-like object), or TXT (file-like object).

    Returns:
        The answer generated by Gemini or an error message.
    """
    try:
        if input_type == "image":
            if not isinstance(problem_input, Image.Image):
                raise ValueError("The input for 'image' must be a PIL Image object.")

            prompt = """
            You are an expert solver of math and logic problems.
            Analyze the provided image and solve the mathematical or logical problem it represents.
            Provide a clear and detailed explanation of the steps you took to arrive at the solution.
            If the image does not contain a math or logic problem, respond with "The image does not contain a valid math or logic problem."
            """
            response = model.generate_content([prompt, problem_input])
            return response.text


        elif input_type == "text_normal":
            if not isinstance(problem_input, str):
                raise ValueError("The input for 'text_normal' must be a string.")
            prompt = f"""
            You are an expert in understanding and interpreting text.
            Analyze the following text and provide a detailed explanation or answer as appropriate.

            {problem_input}
            """
            response = model.generate_content(prompt)
            return response.text

        elif input_type == "text_latex":
            if not isinstance(problem_input, str):
                raise ValueError("The input for 'text_latex' must be a string.")
            prompt = f"""
            You are an expert solver of math and logic problems.
            The following problem is written in LaTeX format. Please solve it.

            {problem_input}

            Provide a clear and detailed explanation of the steps you took to arrive at the solution.
            If the text does not contain a valid math or logic problem, respond with "The text does not contain a valid math or logic problem."
            """
            response = model.generate_content(prompt)
            return response.text

        elif input_type == "pdf":
            problem_text = extract_text_from_pdf(problem_input)
            if not problem_text:
                return "Could not extract text from the PDF file."
            return solve_problem("text_normal", problem_text)

        elif input_type == "docx":
            problem_text = extract_text_from_docx(problem_input)
            if not problem_text:
                return "Could not extract text from the DOCX file."
            return solve_problem("text_normal", problem_text)

        elif input_type == "txt":
            problem_text = extract_text_from_txt(problem_input)
            if not problem_text:
                return "Could not read text from the TXT file"
            return solve_problem("text_normal", problem_text)

        else:
            raise ValueError("input_type must be 'image', 'text_normal', 'text_latex', 'pdf', 'docx', or 'txt'.")


    except Exception as e:
        return f"Error solving the problem: {e}"

def image_to_byte_array(image: Image) -> bytes:
    """Converts a PIL image to a byte array."""
    img_byte_arr = io.BytesIO()
    image.save(img_byte_arr, format=image.format)
    img_byte_arr = img_byte_arr.getvalue()
    return img_byte_arr


def get_image_data_uri(image: Image) -> str:
    """Converts a PIL image to a Data URI."""
    buffered = io.BytesIO()
    image.save(buffered, format="PNG")
    img_str = base64.b64encode(buffered.getvalue()).decode()
    return f"data:image/png;base64,{img_str}"







# --- streamlit interface ---
st.title("Problem Solver with Gemini")

st.write(
    "Upload an image, enter text, or upload a file (PDF, DOCX, or TXT) and Gemini will analyze it for you!"
)


input_method = st.radio("Choose input method:", ("Upload an image", "Enter text", "Upload a file (PDF, DOCX, TXT)"))


if input_method == "Upload an image":
    uploaded_file = st.file_uploader("Upload an image", type=["jpg", "jpeg", "png"])
    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        st.image(image, caption="Uploaded Image", use_column_width=True)

        if st.button("Analyze the image"):
            with st.spinner("Analyzing..."):
                solution = solve_problem("image", image)
                st.markdown("**Solution:**")
                st.write(solution)

                if solution:
                    st.code(solution, language=None)
                    st.success("Solution copied to clipboard!")



elif input_method == "Enter text":
    text_type = st.radio("Choose text type:", ("Normal text", "LaTeX"))
    problem_text = st.text_area("Enter the text:")


    if text_type == "LaTeX" and problem_text:
        st.latex(problem_text)

    if st.button(f"Analyze the text (using {text_type})"):
        if not problem_text:
            st.warning("Please enter some text.")
        else:
            with st.spinner("Analyzing..."):
                input_type = "text_normal" if text_type == "Normal text" else "text_latex"
                solution = solve_problem(input_type, problem_text)
                st.markdown("**Solution:**")
                st.write(solution)

                if solution:
                    st.code(solution, language=None)
                    st.success("Solution copied to clipboard!")


elif input_method == "Upload a file (PDF, DOCX, TXT)":
    uploaded_file = st.file_uploader("Upload a file", type=["pdf", "docx", "txt"])
    if uploaded_file is not None:
        file_type = uploaded_file.type.split("/")[1]

        if file_type == "txt":
          file_type = "txt"

        if st.button(f"Analyze the {file_type.upper()} file"):
            with st.spinner("Analyzing..."):
                solution = solve_problem(file_type, uploaded_file)
                st.markdown("**Solution:**")
                st.write(solution)

                if solution:
                    st.code(solution, language=None)
                    st.success("Solution copied to clipboard!")



# Information about Gemini
st.sidebar.markdown("## Information")
st.sidebar.write(
    "This app uses the **Gemini 2.0 Flash Thinking** experimental model to analyze and solve problems from images, text, or files."
    "These models are still under development and may not always provide accurate answers."
)